<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.losgai.sys.mapper.CommentMapper">

    <resultMap id="BaseResultMap" type="com.losgai.sys.entity.carRental.Comment">
            <id property="id" column="id" />
            <result property="userId" column="user_id" />
            <result property="carId" column="car_id" />
            <result property="parentCommentId" column="parent_comment_id" />
            <result property="followCommentId" column="follow_comment_id" />
            <result property="content" column="content" />
            <result property="createTime" column="create_time" />
            <result property="updateTime" column="update_time" />
            <result property="deleted" column="deleted" />
    </resultMap>

    <sql id="Base_Column_List">
        id,user_id,car_id,parent_comment_id,follow_comment_id,content,
        create_time,update_time,deleted
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from comment
        where  id = #{id} 
    </select>

    <select id="query" resultType="com.losgai.sys.vo.TopCommentVo">
        SELECT c.id                 AS id,
               c.user_id            AS userId,
               u.username           AS username,
               u.avatar_url         AS avatar,
               c.car_id             AS carId,
               c2.name              AS carName,
               IF(u.role = 1, 2, 0) AS userType,
               ro.score             AS score,
               c.parent_comment_id  AS parentCommentId,
               c.follow_comment_id  AS followCommentId,
               c.content            AS content,
               c.like_count         AS likeCount,
               c.create_time        AS createTime
        FROM comment c
                 LEFT JOIN user u ON c.user_id = u.id
                 LEFT JOIN car c2 ON c.car_id = c2.id
                 LEFT JOIN rental_order ro ON c.car_id = ro.car_id and ro.user_id = c.user_id
        WHERE c.deleted = 0
        AND c.parent_comment_id = 0
        <if test="keyWord != null and keyWord != ''">
            AND (
                c.content like concat('%', #{keyWord}, '%')
                OR u.username like concat('%', #{keyWord}, '%')
                OR c2.name like concat('%', #{keyWord}, '%')
                )
        </if>
        ORDER BY c.create_time DESC
    </select>

    <!--封装顶级评论-->
    <select id="queryVoByCarIdWithLimit" resultType="com.losgai.sys.vo.TopCommentVo">
        SELECT c.id                 AS id,
               c.user_id            AS userId,
               u.username           AS username,
               u.avatar_url         AS avatar,
               c.car_id             AS carId,
               IF(u.role = 1, 2, 0) AS userType,
               ro.score             AS score,
               c.parent_comment_id  AS parentCommentId,
               c.follow_comment_id  AS followCommentId,
               c.content            AS content,
               c.like_count         AS likeCount,
               c.create_time        AS createTime
        FROM comment c
                 LEFT JOIN user u ON c.user_id = u.id
                 LEFT JOIN rental_order ro ON c.car_id = ro.car_id and ro.user_id = c.user_id
        WHERE c.car_id = #{carId}
          AND c.deleted = 0
          AND c.parent_comment_id = 0
        ORDER BY c.like_count DESC, c.create_time DESC
        LIMIT 5; --
    </select>

    <select id="queryVoByCarId" resultType="com.losgai.sys.vo.TopCommentVo">
        SELECT c.id                 AS id,
               c.user_id            AS userId,
               u.username           AS username,
               u.avatar_url         AS avatar,
               c.car_id             AS carId,
               IF(u.role = 1, 2, 0) AS userType,
               ro.score             AS score,
               c.parent_comment_id  AS parentCommentId,
               c.follow_comment_id  AS followCommentId,
               c.content            AS content,
               c.like_count         AS likeCount,
               c.create_time        AS createTime
        FROM comment c
                 LEFT JOIN user u ON c.user_id = u.id
                 LEFT JOIN rental_order ro ON c.car_id = ro.car_id and ro.user_id = c.user_id
        WHERE c.car_id = #{carId}
          AND c.deleted = 0
          AND c.parent_comment_id = 0
        ORDER BY c.like_count DESC, c.create_time DESC
    </select>

<!--    <select id="queryVoByIds" resultType="com.losgai.sys.vo.CommentVo">-->
<!--        SELECT-->
<!--            c.id AS id,-->
<!--            c.user_id AS userId,-->
<!--            u.username AS username,-->
<!--            u.avatar_url AS avatar,-->
<!--            c.car_id AS carId,-->
<!--            c.parent_comment_id AS parentCommentId,-->
<!--            c.follow_comment_id AS followCommentId,-->
<!--            c.content AS content,-->
<!--            c.like_count AS likeCount,-->
<!--            c.create_time AS createTime-->
<!--        FROM comment c-->
<!--                 LEFT JOIN user u ON c.user_id = u.id-->
<!--        WHERE c.deleted = 0-->
<!--          AND c.parent_comment_id in (-->
<!--            <foreach item="item" collection="ids" separator=",">-->
<!--                #{item}-->
<!--            </foreach>-->
<!--        )-->
<!--        ORDER BY c.like_count DESC-->
<!--    </select>-->

    <!--窗口函数，对于每个parentId取3个评论-->
    <select id="queryVoByIds" resultType="com.losgai.sys.vo.CommentVo">
        SELECT *
        FROM (
        SELECT
        c.id AS id,
        c.user_id AS userId,
        u.username AS username,
        u.avatar_url AS avatar,
        c.car_id AS carId,
        c.parent_comment_id AS parentCommentId,
        c.follow_comment_id AS followCommentId,
        c.content AS content,
        c.like_count AS likeCount,
        c.create_time AS createTime,
        ROW_NUMBER() OVER (PARTITION BY c.parent_comment_id ORDER BY c.like_count DESC) AS rn
        FROM comment c
        LEFT JOIN user u ON c.user_id = u.id
        WHERE c.deleted = 0
        AND c.parent_comment_id IN
        <foreach item="item" collection="ids" open="(" separator="," close=")">
            #{item}
        </foreach>
        ) t
        WHERE t.rn &lt;= #{limit}
    </select>


    <select id="loadReplyByCommentId" resultType="com.losgai.sys.vo.CommentVo">
        SELECT
        c.id AS id,
        c.user_id AS userId,
        u.username AS username,
        u.avatar_url AS avatar,
        c.car_id AS carId,
        c.parent_comment_id AS parentCommentId,
        c.follow_comment_id AS followCommentId,
        c.content AS content,
        c.like_count AS likeCount,
        c.create_time AS createTime
        FROM comment c
        LEFT JOIN user u ON c.user_id = u.id
        WHERE c.deleted = 0
        AND c.parent_comment_id = #{id}
        ORDER BY c.like_count DESC
    </select>

    <select id="queryVoById" resultType="com.losgai.sys.vo.CommentVo">
        SELECT
        c.id AS id,
        c.user_id AS userId,
        u.username AS username,
        u.avatar_url AS avatar,
        c.car_id AS carId,
        c.parent_comment_id AS parentCommentId,
        c.follow_comment_id AS followCommentId,
        c.content AS content,
        c.like_count AS likeCount,
        c.create_time AS createTime
        FROM comment c
        LEFT JOIN user u ON c.user_id = u.id
        WHERE c.deleted = 0
        AND c.parent_comment_id = #{id}
        ORDER BY c.like_count DESC
        LIMIT 3
    </select>

    <select id="queryCarIdsByCommentIds" resultType="java.lang.Long">
        select car_id from comment
        where id in
        <foreach item="item" collection="commentIds" separator="," open="(" close=")">
            #{item}
        </foreach>
        and deleted = 0
        group by car_id
    </select>

    <update id="deleteByPrimaryKey" parameterType="java.lang.Long">
        update CARDB.comment set
        deleted = 1
        where id = #{id}
        or parent_comment_id = #{id}
        or follow_comment_id = #{id}
    </update>

    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.losgai.sys.entity.carRental.Comment" useGeneratedKeys="true">
        insert into comment
        ( id,user_id,car_id,parent_comment_id,follow_comment_id,content,like_count,
        create_time,update_time,deleted)
        values (#{id},#{userId},#{carId},#{parentCommentId},#{followCommentId},#{content},#{likeCount},
        #{createTime},#{updateTime},#{deleted})
    </insert>

    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.losgai.sys.entity.carRental.Comment" useGeneratedKeys="true">
        insert into comment
        <trim prefix="(" suffix=")" suffixOverrides=",">
                <if test="id != null">id,</if>
                <if test="userId != null">user_id,</if>
                <if test="carId != null">car_id,</if>
                <if test="parentCommentId != null">parent_comment_id,</if>
                <if test="followCommentId != null">follow_comment_id,</if>
                <if test="content != null">content,</if>
                <if test="createTime != null">create_time,</if>
                <if test="updateTime != null">update_time,</if>
                <if test="deleted != null">deleted,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
                <if test="id != null">#{id},</if>
                <if test="userId != null">#{userId},</if>
                <if test="carId != null">#{carId},</if>
                <if test="parentCommentId != null">#{parentCommentId},</if>
                <if test="followCommentId != null">#{followCommentId},</if>
                <if test="content != null">#{content},</if>
                <if test="createTime != null">#{createTime},</if>
                <if test="updateTime != null">#{updateTime},</if>
                <if test="deleted != null">#{deleted},</if>
        </trim>
    </insert>

    <update id="syncLikeCount">
        UPDATE comment
        SET like_count = #{likeCount}
        WHERE id = #{commentId}
        AND deleted = 0
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="com.losgai.sys.entity.carRental.Comment">
        update comment
        <set>
                <if test="userId != null">
                    user_id = #{userId},
                </if>
                <if test="carId != null">
                    car_id = #{carId},
                </if>
                <if test="parentCommentId != null">
                    parent_comment_id = #{parentCommentId},
                </if>
                <if test="followCommentId != null">
                    follow_comment_id = #{followCommentId},
                </if>
                <if test="content != null">
                    content = #{content},
                </if>
                <if test="createTime != null">
                    create_time = #{createTime},
                </if>
                <if test="updateTime != null">
                    update_time = #{updateTime},
                </if>
                <if test="deleted != null">
                    deleted = #{deleted},
                </if>
        </set>
        where   id = #{id} 
    </update>

    <update id="updateByPrimaryKey" parameterType="com.losgai.sys.entity.carRental.Comment">
        update comment
        set 
            user_id =  #{userId},
            car_id =  #{carId},
            parent_comment_id =  #{parentCommentId},
            follow_comment_id =  #{followCommentId},
            content =  #{content},
            create_time =  #{createTime},
            update_time =  #{updateTime},
            deleted =  #{deleted}
        where   id = #{id} 
    </update>

    <update id="batchUpdateLikeCount">
        UPDATE comment
        SET like_count = CASE id
        <foreach collection="commentLikeCounts" index="key" item="value">
            WHEN #{key} THEN #{value}
        </foreach>
        END
        WHERE id IN
        <foreach collection="commentLikeCounts.keySet()" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>


</mapper>
